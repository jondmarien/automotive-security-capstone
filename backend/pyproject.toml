[project]
name = "automotive-security-backend"
version = "0.1.0"
description = "Backend for Automotive Security Capstone Project - Real-time RF signal analysis and automotive security threat detection"
authors = [
    {name = "Jonathan Marien", email = "jon@chron0.tech"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["automotive", "security", "rf-analysis", "rtl-sdr", "threat-detection"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: System :: Hardware :: Hardware Drivers",
]

dependencies = [
    "asyncio>=3.4.3",
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.6.0",
    "python-dotenv>=1.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pydantic-settings>=2.9.1",
    "python-json-logger>=3.3.0",
    "motor>=3.7.1",
    "numpy>=1.26.4",
    "aiohttp>=3.12.15",
    "matplotlib>=3.10.3",
    "scikit-learn>=1.7.1",
    "seaborn>=0.13.2",
    "pyfiglet>=1.0.3",
    "rich>=14.1.0",
    "prompt-toolkit>=3.0.51",
    "typer>=0.15.1",
]

[project.scripts]
autosec-dashboard = "cli_dashboard:main"
autosec-server = "rtl_sdr.startup_server:main"
autosec-analyzer = "detection.security_analyzer:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]  # Current directory (backend) contains our packages
include = ["detection*", "rtl_sdr*", "pico*", "utils*", "hardware*"]
exclude = ["tests*", "docs*", "exports*", "logs*", "results*", "rtl_sdr_bin*"]

# uv-specific configuration
[tool.uv]
package = true
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "black>=24.0.0",
    "mypy>=1.13.0",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "black>=24.0.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
]
lint = [
    "ruff>=0.12.7",
    "black>=24.0.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
]
rtlsdr = [
    "pyrtlsdr>=0.3.0",
    "rtlsdr>=0.1.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Enable basic linting rules
select = ["E4", "E7", "E9", "F"]
# Ignore problematic rules
ignore = ["E501"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore import errors for MicroPython files
"pico/*.py" = ["F401", "E402", "F811"]
"setup.py" = ["F401", "E402"]

[tool.ruff.lint.isort]
case-sensitive = true
force-wrap-aliases = true
combine-as-imports = true
detect-same-package = true
from-first = true
length-sort = true
force-to-top = ["backend"]
known-local-folder = ["backend"]
classes = ["SVC"]
# Use a single line after each import block. (-1 for automatic determination)
lines-after-imports = -1
# Use a single line between direct and from import.
lines-between-types = 1

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# Type checking configuration for ty
[tool.ty.src]
# Exclude MicroPython files and build files from type checking
exclude = [
    "pico/**",
    "setup.py",
]

# Configure overrides for test files and optional dependencies
[[tool.ty.overrides]]
include = ["tests/**"]
[tool.ty.overrides.rules]
"unresolved-import" = "ignore"  # pytest may not be installed

[[tool.ty.overrides]]
include = ["utils/simple_performance_monitor.py"]
[tool.ty.overrides.rules]
"unresolved-import" = "ignore"  # psutil is optional

[[tool.ty.overrides]]
include = ["deploy_pico.py"]
[tool.ty.overrides.rules]
"unresolved-import" = "ignore"  # pyserial is optional for Pico deployment
